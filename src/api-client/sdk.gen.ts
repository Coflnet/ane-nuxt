// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from '@hey-api/client-nuxt';
import type { LoginFirebaseData, LoginFirebaseResponse, LoginFirebaseError, GetFiltersData, GetFiltersResponse, GetFiltersError, GetOptionsData, GetOptionsResponse, GetOptionsError, AddFilterData, AddFilterResponse, AddFilterError, DeleteFilterData, DeleteFilterError, DeleteFilterWithTokenData, DeleteFilterWithTokenError, GetFilterByTokenData, GetFilterByTokenResponse, GetFilterByTokenError, TestFilterData, TestFilterResponse, TestFilterError, GetMatchesData, GetMatchesResponse, GetMatchesError, GetListingData, GetListingResponse, GetListingError, GetSubscriptionData, GetSubscriptionResponse, GetSubscriptionError, SubscribeData, SubscribeResponse, SubscribeError, CancelSubscriptionData, CancelSubscriptionResponse, CancelSubscriptionError, DoRedirectData, DoRedirectError, GetMeData, GetMeResponse, GetMeError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const loginFirebase = <TComposable extends Composable, DefaultT extends LoginFirebaseResponse = LoginFirebaseResponse>(options: Options<TComposable, LoginFirebaseData, LoginFirebaseResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, LoginFirebaseResponse | DefaultT, LoginFirebaseError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth/firebase',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getFilters = <TComposable extends Composable, DefaultT extends GetFiltersResponse = GetFiltersResponse>(options: Options<TComposable, GetFiltersData, GetFiltersResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetFiltersResponse | DefaultT, GetFiltersError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters/user',
        ...options
    });
};

export const getOptions = <TComposable extends Composable, DefaultT extends GetOptionsResponse = GetOptionsResponse>(options: Options<TComposable, GetOptionsData, GetOptionsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOptionsResponse | DefaultT, GetOptionsError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters/options',
        ...options
    });
};

export const addFilter = <TComposable extends Composable, DefaultT extends AddFilterResponse = AddFilterResponse>(options: Options<TComposable, AddFilterData, AddFilterResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, AddFilterResponse | DefaultT, AddFilterError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteFilter = <TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, DeleteFilterData, unknown, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, unknown | DefaultT, DeleteFilterError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters/{id}',
        ...options
    });
};

export const deleteFilterWithToken = <TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, DeleteFilterWithTokenData, unknown, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, unknown | DefaultT, DeleteFilterWithTokenError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters/{id}/token/{token}',
        ...options
    });
};

export const getFilterByToken = <TComposable extends Composable, DefaultT extends GetFilterByTokenResponse = GetFilterByTokenResponse>(options: Options<TComposable, GetFilterByTokenData, GetFilterByTokenResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetFilterByTokenResponse | DefaultT, GetFilterByTokenError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters/{id}/token/{token}',
        ...options
    });
};

export const testFilter = <TComposable extends Composable, DefaultT extends TestFilterResponse = TestFilterResponse>(options: Options<TComposable, TestFilterData, TestFilterResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, TestFilterResponse | DefaultT, TestFilterError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/filters/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getMatches = <TComposable extends Composable, DefaultT extends GetMatchesResponse = GetMatchesResponse>(options: Options<TComposable, GetMatchesData, GetMatchesResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetMatchesResponse | DefaultT, GetMatchesError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/matches',
        ...options
    });
};

export const getListing = <TComposable extends Composable, DefaultT extends GetListingResponse = GetListingResponse>(options: Options<TComposable, GetListingData, GetListingResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetListingResponse | DefaultT, GetListingError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/listing/{id}',
        ...options
    });
};

export const getSubscription = <TComposable extends Composable, DefaultT extends GetSubscriptionResponse = GetSubscriptionResponse>(options: Options<TComposable, GetSubscriptionData, GetSubscriptionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetSubscriptionResponse | DefaultT, GetSubscriptionError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment/subscription',
        ...options
    });
};

export const subscribe = <TComposable extends Composable, DefaultT extends SubscribeResponse = SubscribeResponse>(options: Options<TComposable, SubscribeData, SubscribeResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, SubscribeResponse | DefaultT, SubscribeError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment/subscription',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const cancelSubscription = <TComposable extends Composable, DefaultT extends CancelSubscriptionResponse = CancelSubscriptionResponse>(options: Options<TComposable, CancelSubscriptionData, CancelSubscriptionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, CancelSubscriptionResponse | DefaultT, CancelSubscriptionError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment/subscription/{id}',
        ...options
    });
};

export const doRedirect = <TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, DoRedirectData, unknown, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, DoRedirectError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/redirect',
        ...options
    });
};

export const getMe = <TComposable extends Composable, DefaultT extends GetMeResponse = GetMeResponse>(options: Options<TComposable, GetMeData, GetMeResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetMeResponse | DefaultT, GetMeError, DefaultT>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user/me',
        ...options
    });
};